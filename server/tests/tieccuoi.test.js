const request = require('supertest');
const mongoose = require('mongoose');
const { MongoMemoryServer } = require('mongodb-memory-server');
const app = require('../apptest');

const Tieccuoi = require('../models/Tieccuoi');
const Hoadon = require('../models/Hoadon');
const Sanh = require('../models/Sanh');
const Monan = require('../models/Monan');
const Dichvu = require('../models/Dichvu');
const ChiTietMonAn = require('../models/Chitietmonan');
const ChiTietDichVu = require('../models/Chitietdichvu');

let mongoServer;

beforeAll(async () => {
  mongoServer = await MongoMemoryServer.create();
  await mongoose.connect(mongoServer.getUri());
});

afterAll(async () => {
  await mongoose.disconnect();
  await mongoServer.stop();
});

afterEach(async () => {
  await Promise.all([
    Tieccuoi.deleteMany(),
    Hoadon.deleteMany(),
    Sanh.deleteMany(),
    Monan.deleteMany(),
    Dichvu.deleteMany(),
  ]);
});

describe('üíí QUY TR√åNH ƒê·∫∂T TI·ªÜC C∆Ø·ªöI', () => {
  const setupTiec = async (ngayDai) => {
    const resSanh = await request(app).post('/api/sanh').send({
      TENSANH: 'S·∫£nh Kim C∆∞∆°ng',
      LOAISANH: 'VIP',
      DONGIABANTT: 1000000,
      SOLUONGBANTD: 40,
      GHICHU: 'S·∫£nh cao c·∫•p'
    });
    const sanhId = resSanh.body._id;

    const resMon1 = await request(app).post('/api/monan').send({
      TENMONAN: 'L·∫©u h·∫£i s·∫£n',
      LOAI: 'M√≥n Ch√≠nh',
      DONGIA: 150000
    });
    const resMon2 = await request(app).post('/api/monan').send({
      TENMONAN: 'G·ªèi ng√≥ sen',
      LOAI: 'M√≥n Khai V·ªã',
      DONGIA: 200000
    });

    const resDV = await request(app).post('/api/dichvu').send({
      TENDICHVU: 'Ban nh·∫°c s·ªëng',
      DONGIA: 1000000,
      GHICHU: 'Ban nh·∫°c bi·ªÉu di·ªÖn',
      DANHMUC: 'Gi·∫£i tr√≠'
    });

    const slBan = 10, slBanDT = 2;
    const tongBan = slBan + slBanDT;
    const tienMon = 150000 + 200000;
    const tienBan = tienMon * tongBan;
    const tienDV = 1000000;
    const tiencoc = (tienBan + tienDV) / 10;

    const resTiec = await request(app).post('/api/tieccuoi').send({
      NGAYDAI: ngayDai,
      CA: 'Tr∆∞a',
      SOLUONGBAN: slBan,
      SOBANDT: slBanDT,
      MASANH: sanhId,
      TENCR: 'Nguy·ªÖn VƒÉn A',
      TENCD: 'Tr·∫ßn Th·ªã B',
      SDT: '0987654321',
      TIENCOC: tiencoc,
      foods: [
        { foodId: resMon1.body._id, price: 150000 },
        { foodId: resMon2.body._id, price: 200000 }
      ],
      services: [
        { serviceId: resDV.body._id, price: 1000000, quantity: 1 }
      ]
    });

 
    // v√¨ POST tr·∫£ v·ªÅ h√≥a ƒë∆°n, l·∫•y MATIEC t·ª´ ƒë√≥
    const matiec = resTiec.body.MATIEC;
    // lookup Tieccuoi b·∫±ng MATIEC
    const tiec = await Tieccuoi.findOne({ MATIEC: matiec }).lean();
    return { tiec, tiencoc, tienBan, tienDV };
  };

  // 1Ô∏è‚É£ ƒê·∫∑t ti·ªác v√† t·∫°o h√≥a ƒë∆°n ƒë·∫∑t c·ªçc
  it('1. ƒê·∫∑t ti·ªác th√†nh c√¥ng v√† t·∫°o h√≥a ƒë∆°n ƒë·∫∑t c·ªçc', async () => {
    const { tiec, tiencoc } = await setupTiec('2025-12-25');
    const hoadons = await Hoadon.find({ MATIEC: tiec.MATIEC });
    expect(hoadons.length).toBe(1);
    expect(hoadons[0].LOAIHOADON).toBe('ƒê·∫∑t c·ªçc');
    expect(hoadons[0].SOTIENHOADON).toBe(tiencoc);
  });

  // 2Ô∏è‚É£ Thanh to√°n ƒë√∫ng h·∫°n
  it('2. Thanh to√°n ƒë√∫ng h·∫°n kh√¥ng b·ªã ph·∫°t', async () => {
    const { tiec, tiencoc, tienBan, tienDV } = await setupTiec('2099-01-01');
    const resPay = await request(app).post(`/api/tieccuoi/${tiec._id}/pay`).send();
    expect(resPay.statusCode).toBe(200);
    expect(resPay.body.SOTIENHOADON).toBe(tiencoc * 9);

    const allBills = await Hoadon.find({ MATIEC: tiec.MATIEC });
    expect(allBills.length).toBe(2);

    const payBill = allBills.find(b => b.LOAIHOADON === 'Thanh to√°n');
    expect(payBill.TIENPHAT).toBe(0);
    expect(payBill.SOTIENHOADON).toBe(tiencoc * 9);
    expect(payBill.TIENBAN).toBe(tienBan);
    expect(payBill.TIENDICHVU).toBe(tienDV);
  });

  // 3Ô∏è‚É£ Thanh to√°n tr·ªÖ
  it('3. Thanh to√°n tr·ªÖ s·∫Ω t√≠nh ti·ªÅn ph·∫°t', async () => {
    const ngayDai = new Date();
    ngayDai.setDate(ngayDai.getDate() - 3);
    const { tiec, tiencoc } = await setupTiec(ngayDai.toISOString().split('T')[0]);

    const resPay = await request(app).post(`/api/tieccuoi/${tiec._id}/pay`).send();
    expect(resPay.statusCode).toBe(200);

    const daysLate = Math.ceil((new Date() - new Date(ngayDai)) / (1000 * 60 * 60 * 24));
    const penalty = (daysLate - 1) * 0.01 * tiencoc * 10;
    const expectedTotal = tiencoc * 9 + penalty;

    const payBill = await Hoadon.findOne({ MATIEC: tiec.MATIEC, LOAIHOADON: 'Thanh to√°n' });

    expect(resPay.body.SOTIENHOADON).toBe(expectedTotal);
    expect(payBill.TIENPHAT).toBe(penalty);
    expect(payBill.SOTIENHOADON).toBe(expectedTotal);
  });

  // 4Ô∏è‚É£ L·ªói khi kh√¥ng ch·ªçn m√≥n ƒÉn
  it('4. Kh√¥ng ch·ªçn m√≥n ƒÉn s·∫Ω b√°o l·ªói', async () => {
    const resSanh = await request(app).post('/api/sanh').send({
      TENSANH: 'S·∫£nh R·ªìng V√†ng',
      LOAISANH: 'Th∆∞·ªùng',
      DONGIABANTT: 800000,
      SOLUONGBANTD: 30,
    });

    const res = await request(app).post('/api/tieccuoi').send({
      NGAYDAI: '2025-12-12',
      CA: 'T·ªëi',
      SOLUONGBAN: 5,
      SOBANDT: 0,
      MASANH: resSanh.body._id,
      TENCR: 'Anh A',
      TENCD: 'Ch·ªã B',
      SDT: '0123456789',
      foods: [],    // kh√¥ng ch·ªçn m√≥n ƒÉn
      services: []
    });

    expect([400, 422, 500]).toContain(res.statusCode);
    expect(res.body.message || res.body.error || '').toMatch("Internal Server Error" );
  });

  // 5Ô∏è‚É£ L·ªói khi t·ªïng ti·ªÅn m√≥n < ƒë∆°n gi√° b√†n
  it('5. T·ªïng ti·ªÅn m√≥n < ƒë∆°n gi√° b√†n ‚Üí l·ªói', async () => {
    const resSanh = await request(app).post('/api/sanh').send({
      TENSANH: 'S·∫£nh Trung',
      LOAISANH: 'VIP',
      DONGIABANTT: 200000,
      SOLUONGBANTD: 30,
    });

    const resMon = await request(app).post('/api/monan').send({
      TENMONAN: 'B√°nh h·ªèi',
      LOAI: 'M√≥n ch√≠nh',
      DONGIA: 100000
    });

    const res = await request(app).post('/api/tieccuoi').send({
      NGAYDAI: '2025-11-11',
      CA: 'Tr∆∞a',
      SOLUONGBAN: 5,
      SOBANDT: 0,
      MASANH: resSanh.body._id,
      TENCR: 'A',
      TENCD: 'B',
      SDT: '0123456789',
      foods: [{ foodId: resMon.body._id, price: 100000 }],
      services: []
    });

    expect([400, 422, 500]).toContain(res.statusCode);
    expect(res.body.message || res.body.error || '').toMatch("Internal Server Error");
  });

 

  // 7Ô∏è‚É£ X√≥a ti·ªác s·∫Ω x√≥a h√≥a ƒë∆°n v√† chi ti·∫øt li√™n quan
  it('7. X√≥a ti·ªác s·∫Ω x√≥a h√≥a ƒë∆°n v√† chi ti·∫øt li√™n quan', async () => {
    const { tiec } = await setupTiec('2025-12-12');

    // ƒê·∫£m b·∫£o c√≥ d·ªØ li·ªáu tr∆∞·ªõc khi x√≥a
    const hoadonsBefore = await Hoadon.find({ MATIEC: tiec.MATIEC });
    const ctMAsBefore = await ChiTietMonAn.find({ MATIEC: tiec.MATIEC });
    const ctDVsBefore = await ChiTietDichVu.find({ MATIEC: tiec.MATIEC });

    expect(hoadonsBefore.length).toBeGreaterThan(0);
    expect(ctMAsBefore.length).toBeGreaterThan(0);
    expect(ctDVsBefore.length).toBeGreaterThan(0);

    // Xo√° ti·ªác c∆∞·ªõi
    const res = await request(app).delete(`/api/tieccuoi/${tiec._id}`);
    expect(res.statusCode).toBe(200);
    expect(res.body.message).toMatch("ƒê√£ xo√° ti·ªác c∆∞·ªõi v√† d·ªØ li·ªáu li√™n quan");

    // Ki·ªÉm tra ƒë√£ x√≥a ti·ªác
    const tiecDeleted = await Tieccuoi.findById(tiec._id);
    expect(tiecDeleted).toBeNull();

    // Ki·ªÉm tra ƒë√£ x√≥a h√≥a ƒë∆°n
    const hoadonsAfter = await Hoadon.find({ MATIEC: tiec.MATIEC });
    expect(hoadonsAfter.length).toBe(0);

    // Ki·ªÉm tra ƒë√£ x√≥a chi ti·∫øt m√≥n ƒÉn
    const ctMAsAfter = await ChiTietMonAn.find({ MATIEC: tiec.MATIEC });
    expect(ctMAsAfter.length).toBe(0);

    // Ki·ªÉm tra ƒë√£ x√≥a chi ti·∫øt d·ªãch v·ª•
    const ctDVsAfter = await ChiTietDichVu.find({ MATIEC: tiec.MATIEC });
    expect(ctDVsAfter.length).toBe(0);
  });


});
